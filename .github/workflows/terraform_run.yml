name: Terraform Run

on: push

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  S3_BACKEND_BUCKET: ${{ secrets.S3_BACKEND_BUCKET }}
  S3_BACKEND_KEY: ${{ secrets.S3_BACKEND_KEY }}
  TF_VAR_remote_state_bucket: ${{ secrets.S3_BACKEND_BUCKET }}

defaults:
  run:
    working-directory: ./terraform

jobs:
  plan:
    name: Terraform Plan
    runs-on: ubuntu-22.04
    outputs:
      planfile_artifact_id: ${{ steps.set-artifact-id-var.outputs.artifact_id }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.11.4"

      - name: Terraform init
        run: |
          terraform init \
            -backend-config="bucket=${{ env.S3_BACKEND_BUCKET }}" \
            -backend-config="key=${{ env.S3_BACKEND_KEY }}"

      - name: Terraform format
        run: |
          terraform fmt -check

      # run regardless of previous step failing
      - name: Terraform validate
        if: success() || failure()
        run: terraform validate -no-color

      - name: Run terraform plan
        run: |
          terraform plan -var-file="vars/dev.tfvars" -input=false -out=plan.tfout

      - name: Upload terraform plan file
        id: artifact-upload
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: terraform/plan.tfout

      - name: Set artifact id as output variable (to share with apply job)
        id: set-artifact-id-var
        run: |
          echo "artifact_id="${{ steps.artifact-upload.outputs.artifact-id }}"" >> $GITHUB_OUTPUT
  
  apply:
    name: Terraform Apply
    runs-on: ubuntu-22.04
    environment: manual  # set up an environment to make this job only run when manually approved
    needs: plan
    env:
      PLANFILE_ARTIFACT_ID: ${{ needs.plan.outputs.planfile_artifact_id }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Download terraform plan file
        id: pipeline-artifact
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan

      - name: Setup terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.11.4"

      - name: Terraform init
        run: |
          terraform init \
            -backend-config="bucket=${{ env.S3_BACKEND_BUCKET }}" \
            -backend-config="key=${{ env.S3_BACKEND_KEY }}"

      - name: Run terraform apply
        run: |
          terraform apply -var-file="vars/dev.tfvars" -auto-approve ../plan.tfout

      # Delete artifact immediately because this is a public repo
      - name: Delete artifact
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ACTIONS_API_TOKEN }}
          script: |
            github.rest.actions.deleteArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: "${{ env.PLANFILE_ARTIFACT_ID }}"
            });

  # destroy:
  #   name: Terraform Destroy
  #   runs-on: ubuntu-22.04
  #   environment: manual  # set up an environment to make this job only run when manually approved
  #   needs: apply
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v4.1.0
  #       with:
  #         aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: us-east-1
      
  #     - name: Setup terraform
  #       uses: hashicorp/setup-terraform@v3
  #       with:
  #         terraform_version: "1.11.4"
  
  #     - name: Terraform init
  #       run: |
  #         terraform init \
  #           -backend-config="bucket=${{ env.S3_BACKEND_BUCKET }}" \
  #           -backend-config="key=${{ env.S3_BACKEND_KEY }}"

  #     - name: Run terraform destroy
  #       run: |
  #         terraform destroy -auto-approve -var-file="vars/dev.tfvars"